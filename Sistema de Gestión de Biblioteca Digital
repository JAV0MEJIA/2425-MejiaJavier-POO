#EJEMPLO DE BIBLIOTECA
#JAVIER MEJIA
class Libro:
    def __init__(self, titulo, autor, categoria, isbn):
        self.info = (titulo, autor)
        self.categoria = categoria
        self.isbn = isbn

    def __str__(self):
        return f"Título: {self.info[0]}, Autor: {self.info[1]}, Categoría: {self.categoria}, ISBN: {self.isbn}"

class Usuario:
    def __init__(self, nombre, id_usuario):
        self.nombre = nombre
        self.id_usuario = id_usuario
        self.libros_prestados = []

    def __str__(self):
        return f"Nombre: {self.nombre}, ID: {self.id_usuario}"

class Biblioteca:
    def __init__(self):
        self.libros = {}
        self.usuarios = set()

    def agregar_libro(self, libro):
        self.libros[libro.isbn] = libro

    def quitar_libro(self, isbn):
        if isbn in self.libros:
            del self.libros[isbn]
        else:
            print("Libro no encontrado")

    def registrar_usuario(self, usuario):
        self.usuarios.add(usuario.id_usuario)

    def dar_baja_usuario(self, id_usuario):
        if id_usuario in self.usuarios:
            self.usuarios.remove(id_usuario)
        else:
            print("Usuario no encontrado")

    def prestar_libro(self, isbn, id_usuario):
        if isbn in self.libros:
            libro = self.libros[isbn]
            for usuario in self.get_usuarios():
                if usuario.id_usuario == id_usuario:
                    usuario.libros_prestados.append(libro)
                    print(f"Libro {libro.info[0]} prestado a {usuario.nombre}")
                    return
            print("Usuario no encontrado")
        else:
            print("Libro no encontrado")

    def devolver_libro(self, isbn, id_usuario):
        for usuario in self.get_usuarios():
            if usuario.id_usuario == id_usuario:
                for libro in usuario.libros_prestados:
                    if libro.isbn == isbn:
                        usuario.libros_prestados.remove(libro)
                        print(f"Libro {libro.info[0]} devuelto")
                        return
                print("Libro no prestado")
                return
        print("Usuario no encontrado")

    def buscar_libro(self, titulo=None, autor=None, categoria=None):
        resultados = []
        for libro in self.libros.values():
            if (titulo and libro.info[0].lower() == titulo.lower()) or \
               (autor and libro.info[1].lower() == autor.lower()) or \
               (categoria and libro.categoria.lower() == categoria.lower()):
                resultados.append(libro)
        return resultados

    def get_usuarios(self):
        # Simulación de obtener usuarios, en un sistema real se obtendrían de una base de datos
        class UsuarioFake(Usuario):
            def __init__(self, id_usuario):
                super().__init__("Nombre JUAN PEREZ", id_usuario)
        return [UsuarioFake(id_usuario) for id_usuario in self.usuarios]

    def listar_libros_prestados(self, id_usuario):
        for usuario in self.get_usuarios():
            if usuario.id_usuario == id_usuario:
                return usuario.libros_prestados
        print("Usuario no encontrado")
        return []
biblioteca = Biblioteca()

libro1 = Libro("El Señor de los Anillos", "J.R.R. Tolkien", "Fantasía", "ISBN123")
libro2 = Libro("El Código Da Vinci", "Dan Brown", "Misterio", "ISBN456")

biblioteca.agregar_libro(libro1)
biblioteca.agregar_libro(libro2)

usuario1 = Usuario("Juan Pérez", "USR666")
usuario2 = Usuario("María García", "USR456")

biblioteca.registrar_usuario(usuario1)
biblioteca.registrar_usuario(usuario2)

biblioteca.prestar_libro("ISBN123", "USR666")
biblioteca.prestar_libro("ISBN456", "USR456")

print("Libros prestados a USR666:")
for libro in biblioteca.listar_libros_prestados("USR666"):
    print(libro)

biblioteca.devolver_libro("ISBN123", "USR666")

print("Libros prestados a USR666 después de devolución:")
for libro in biblioteca.listar_libros_prestados("USR666"):
    print(libro)
