#Agenda Personal

import tkinter as tk
from tkinter import ttk, filedialog, simpledialog
from tkinter import messagebox
from datetime import datetime
from tkcalendar import Calendar, DateEntry

class Aplicacion(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Calendario de Eventos")
        self.geometry("800x600")
        self.frame_principal = tk.Frame(self)
        self.frame_principal.pack(fill="both", expand=True)
        self.crear_widgets()

    def crear_widgets(self):
        # Frame para la lista de eventos
        self.frame_lista = tk.Frame(self.frame_principal)
        self.frame_lista.pack(fill="both", expand=True, side="left")

        # Treeview para la lista de eventos
        self.tree = ttk.Treeview(self.frame_lista)
        self.tree["columns"] = ("Fecha", "Hora", "Descripción")
        self.tree.column("#0", width=0, stretch=tk.NO)
        self.tree.column("Fecha", anchor=tk.W, width=100)
        self.tree.column("Hora", anchor=tk.W, width=50)
        self.tree.column("Descripción", anchor=tk.W, width=200)
        self.tree.heading("#0", text="", anchor=tk.W)
        self.tree.heading("Fecha", text="Fecha", anchor=tk.W)
        self.tree.heading("Hora", text="Hora", anchor=tk.W)
        self.tree.heading("Descripción", text="Descripción", anchor=tk.W)
        self.tree.pack(fill="both", expand=True)

        # Frame para la entrada de datos
        self.frame_entrada = tk.Frame(self.frame_principal)
        self.frame_entrada.pack(fill="y", side="right")

        # Etiquetas y campos de entrada
        self.label_fecha = tk.Label(self.frame_entrada, text="Fecha")
        self.label_fecha.pack()
        self.entry_fecha = DateEntry(self.frame_entrada, width=12, bg="darkblue", fg="white", borderwidth=2)
        self.entry_fecha.pack()

        self.label_hora = tk.Label(self.frame_entrada, text="Hora")
        self.label_hora.pack()
        self.entry_hora = tk.Entry(self.frame_entrada)
        self.entry_hora.pack()

        self.label_descripcion = tk.Label(self.frame_entrada, text="Descripción")
        self.label_descripcion.pack()
        self.entry_descripcion = tk.Entry(self.frame_entrada)
        self.entry_descripcion.pack()

        # Botones
        self.button_agregar = tk.Button(self.frame_entrada, text="Agregar Evento", command=self.agregar_evento)
        self.button_agregar.pack()

        self.button_eliminar = tk.Button(self.frame_entrada, text="Eliminar Evento Seleccionado", command=self.eliminar_evento)
        self.button_eliminar.pack()

        self.button_salir = tk.Button(self.frame_entrada, text="Salir", command=self.destroy)
        self.button_salir.pack()

    def agregar_evento(self):
        fecha = self.entry_fecha.get_date().strftime("%d/%m/%Y")
        hora = self.entry_hora.get()
        descripcion = self.entry_descripcion.get()
        self.tree.insert("", "end", values=(fecha, hora, descripcion))
        self.entry_fecha.delete(0, tk.END)
        self.entry_fecha.insert(0, datetime.now().strftime("%d/%m/%Y"))
        self.entry_hora.delete(0, tk.END)
        self.entry_descripcion.delete(0, tk.END)

    def eliminar_evento(self):
        seleccionado = self.tree.selection()
        if seleccionado:
            respuesta = messagebox.askyesno("Eliminar Evento", "¿Estás seguro de que deseas eliminar el evento seleccionado?")
            if respuesta:
                self.tree.delete(seleccionado)
        else:
            messagebox.showinfo("Error", "No hay evento seleccionado")

if __name__ == "__main__":
    app = Aplicacion()
    app.mainloop()
